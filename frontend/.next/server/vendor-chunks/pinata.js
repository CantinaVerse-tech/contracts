"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pinata";
exports.ids = ["vendor-chunks/pinata"];
exports.modules = {

/***/ "(rsc)/./node_modules/pinata/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/pinata/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PinataSDK: () => (/* binding */ PinataSDK)\n/* harmony export */ });\n// src/utils/custom-errors.ts\nvar PinataError = class extends Error {\n  constructor(message, statusCode, details) {\n    super(message);\n    this.statusCode = statusCode;\n    this.details = details;\n    this.name = \"PinataError\";\n  }\n};\nvar NetworkError = class extends PinataError {\n  constructor(message, statusCode, details) {\n    super(message, statusCode, details);\n    this.name = \"NetworkError\";\n  }\n};\nvar AuthenticationError = class extends PinataError {\n  constructor(message, statusCode, details) {\n    super(message, statusCode, details);\n    this.name = \"AuthenticationError\";\n  }\n};\nvar ValidationError = class extends PinataError {\n  constructor(message, details) {\n    super(message, void 0, details);\n    this.name = \"ValidationError\";\n  }\n};\n\n// src/core/authentication/testAuthentication.ts\nvar testAuthentication = async (config) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/testAuthentication\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/testAuthentication`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing authentication: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while testing authentication\"\n    );\n  }\n};\n\n// src/core/pinning/file.ts\nvar uploadFile = async (config, file, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config.pinataJwt;\n  const data = new FormData();\n  data.append(\"file\", file, file.name);\n  data.append(\n    \"pinataOptions\",\n    JSON.stringify({\n      cidVersion: options?.cidVersion,\n      groupId: options?.groupId\n    })\n  );\n  data.append(\n    \"pinataMetadata\",\n    JSON.stringify({\n      name: options?.metadata?.name || file.name || \"File from SDK\",\n      keyvalues: options?.metadata?.keyValues\n    })\n  );\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/file\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error uploading file: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while uploading the file\");\n  }\n};\n\n// src/core/pinning/fileArray.ts\nvar uploadFileArray = async (config, files, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const folder = options?.metadata?.name || \"folder_from_sdk\";\n  const data = new FormData();\n  for (const file of Array.from(files)) {\n    data.append(\"file\", file, `${folder}/${file.name}`);\n  }\n  data.append(\n    \"pinataMetadata\",\n    JSON.stringify({\n      name: folder,\n      keyvalues: options?.metadata?.keyValues\n    })\n  );\n  data.append(\n    \"pinataOptions\",\n    JSON.stringify({\n      cidVersion: options?.cidVersion,\n      groupId: options?.groupId\n    })\n  );\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/fileArray\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing fileArray: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while uploading an array of files\"\n    );\n  }\n};\n\n// src/core/pinning/base64.ts\nvar uploadBase64 = async (config, base64String, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const name = options?.metadata?.name ? options?.metadata?.name : \"base64 string\";\n  const buffer = Buffer.from(base64String, \"base64\");\n  const blob = new Blob([buffer]);\n  const data = new FormData();\n  data.append(\"file\", blob, name);\n  data.append(\n    \"pinataOptions\",\n    JSON.stringify({\n      cidVersion: options?.cidVersion,\n      groupId: options?.groupId\n    })\n  );\n  data.append(\n    \"pinataMetadata\",\n    JSON.stringify({\n      name,\n      keyvalues: options?.metadata?.keyValues\n    })\n  );\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/base64\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing base64: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while trying to upload base64\"\n    );\n  }\n};\n\n// src/core/pinning/url.ts\nvar uploadUrl = async (config, url, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const data = new FormData();\n  const stream = await fetch(url);\n  if (!stream.ok) {\n    const errorData = await stream.text();\n    throw new NetworkError(\n      `HTTP error: ${errorData}`,\n      stream.status,\n      errorData\n    );\n  }\n  const arrayBuffer = await stream.arrayBuffer();\n  const blob = new Blob([arrayBuffer]);\n  const name = options?.metadata?.name ?? \"url_upload\";\n  const file = new File([blob], name);\n  data.append(\"file\", file, name);\n  data.append(\n    \"pinataOptions\",\n    JSON.stringify({\n      cidVersion: options?.cidVersion,\n      groupId: options?.groupId\n    })\n  );\n  data.append(\n    \"pinataMetadata\",\n    JSON.stringify({\n      name,\n      keyvalues: options?.metadata?.keyValues\n    })\n  );\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/url\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/pinFileToIPFS`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing url: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while uploading by url\");\n  }\n};\n\n// src/core/pinning/json.ts\nvar uploadJson = async (config, jsonData, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const data = JSON.stringify({\n    pinataContent: jsonData,\n    pinataOptions: {\n      cidVersion: options?.cidVersion,\n      groupId: options?.groupId\n    },\n    pinataMetadata: {\n      name: options?.metadata?.name || \"json\",\n      keyvalues: options?.metadata?.keyValues\n    }\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/json\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/pinJSONToIPFS`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing json: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while uploading json\");\n  }\n};\n\n// src/core/pinning/cid.ts\nvar uploadCid = async (config, cid, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/cid\"\n    };\n  }\n  const data = JSON.stringify({\n    hashToPin: cid,\n    pinataMetadata: {\n      name: options?.metadata ? options?.metadata?.name : cid,\n      keyvalues: options?.metadata?.keyValues\n    },\n    pinataOptions: {\n      hostNodes: options?.peerAddresses ? options.peerAddresses : \"\",\n      groupId: options?.groupId\n    }\n  });\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/pinByHash`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing cid: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while pinning by CID\");\n  }\n};\n\n// src/core/pinning/unpin.ts\nvar wait = (milliseconds) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nvar unpinFile = async (config, files) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/unpin\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const hash of files) {\n    try {\n      const response = await fetch(`${endpoint}/pinning/unpin/${hash}`, {\n        method: \"DELETE\",\n        headers\n      });\n      await wait(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            errorData\n          );\n        }\n        throw new NetworkError(\n          `HTTP error: ${errorData}`,\n          response.status,\n          errorData\n        );\n      }\n      const result = await response.text();\n      responses.push({\n        hash,\n        status: result\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error unpinning file ${hash}: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while unpinning file ${hash}`;\n      }\n      responses.push({\n        hash,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/data/listFiles.ts\nvar listFiles = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams({\n    includesCount: \"false\"\n  });\n  if (options) {\n    const {\n      cid,\n      pinStart,\n      pinEnd,\n      pinSizeMin,\n      pinSizeMax,\n      pageLimit,\n      pageOffset,\n      name,\n      key,\n      value,\n      operator,\n      groupId\n    } = options;\n    if (cid)\n      params.append(\"cid\", cid);\n    if (pinStart)\n      params.append(\"pinStart\", pinStart);\n    if (pinEnd)\n      params.append(\"pinEnd\", pinEnd);\n    if (pinSizeMin)\n      params.append(\"pinSizeMin\", pinSizeMin.toString());\n    if (pinSizeMax)\n      params.append(\"pinSizeMax\", pinSizeMax.toString());\n    if (pageLimit)\n      params.append(\"pageLimit\", pageLimit.toString());\n    if (pageOffset)\n      params.append(\"pageOffset\", pageOffset.toString());\n    if (groupId)\n      params.append(\"groupId\", groupId);\n    if (name)\n      params.append(\"metadata[name]\", name);\n    if (key && value) {\n      const keyValueParam = JSON.stringify({\n        [key]: { value, op: operator || \"eq\" }\n      });\n      params.append(\"metadata[keyvalues]\", keyValueParam);\n    }\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/data/pinList?status=pinned&${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/listFiles\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.rows;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing list files: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing files\");\n  }\n};\n\n// src/core/data/updateMetadata.ts\nvar updateMetadata = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = {\n    ipfsPinHash: options.cid,\n    name: options.name,\n    keyvalues: options.keyValues\n  };\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/updateMetadata\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinning/hashMetadata`, {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify(data)\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.text();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing updateMetadata: ${error.message}`\n      );\n    }\n    throw new PinataError(\"An unknown error occurred while updating metadata\");\n  }\n};\n\n// src/utils/gateway-tools.ts\nvar isIPFSModule;\nasync function getIsIPFS() {\n  if (!isIPFSModule) {\n    isIPFSModule = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/is-ipfs\"), __webpack_require__.e(\"vendor-chunks/@multiformats\"), __webpack_require__.e(\"vendor-chunks/@chainsafe\"), __webpack_require__.e(\"vendor-chunks/uint8-varint\"), __webpack_require__.e(\"vendor-chunks/iso-url\"), __webpack_require__.e(\"vendor-chunks/@libp2p\")]).then(__webpack_require__.bind(__webpack_require__, /*! is-ipfs */ \"(rsc)/./node_modules/is-ipfs/dist/src/index.js\"));\n  }\n  return isIPFSModule;\n}\nasync function containsCID(input) {\n  if (typeof input !== \"string\") {\n    throw new Error(\"Input is not a string\");\n  }\n  const isIPFS = await getIsIPFS();\n  const startsWithCID = (str) => {\n    const parts = str.split(\"/\");\n    return isIPFS.cid(parts[0]) ? parts[0] : null;\n  };\n  const directCID = startsWithCID(input);\n  if (directCID) {\n    return {\n      containsCid: true,\n      cid: directCID\n    };\n  }\n  let url;\n  try {\n    url = new URL(input);\n  } catch (error) {\n    const parts = input.split(/\\/|\\?/);\n    for (const part of parts) {\n      const cid = startsWithCID(part);\n      if (cid) {\n        return {\n          containsCid: true,\n          cid\n        };\n      }\n    }\n    return {\n      containsCid: false,\n      cid: null\n    };\n  }\n  const subdomains = url.hostname.split(\".\");\n  for (const subdomain of subdomains) {\n    if (isIPFS.cid(subdomain)) {\n      return {\n        containsCid: true,\n        cid: subdomain\n      };\n    }\n  }\n  const pathParts = url.pathname.split(\"/\");\n  for (const part of pathParts) {\n    const cid = startsWithCID(part);\n    if (cid) {\n      return {\n        containsCid: true,\n        cid\n      };\n    }\n  }\n  return {\n    containsCid: false,\n    cid: null\n  };\n}\nasync function convertToDesiredGateway(sourceUrl, desiredGatewayPrefix) {\n  const results = await containsCID(sourceUrl);\n  if (results.containsCid !== true) {\n    throw new Error(\"url does not contain CID\");\n  }\n  if (!sourceUrl.startsWith(\"https\") && !sourceUrl.startsWith(\"ipfs://\")) {\n    return `${desiredGatewayPrefix}/ipfs/${sourceUrl}`;\n  }\n  const urlObj = new URL(sourceUrl);\n  const path = urlObj.pathname + urlObj.search + urlObj.hash;\n  if (sourceUrl.startsWith(`ipfs://${results.cid}`)) {\n    return `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n  }\n  if (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n    return `${desiredGatewayPrefix}${path}`;\n  }\n  if (sourceUrl.includes(`/ipns/${results.cid}`)) {\n    return `${desiredGatewayPrefix}${path}`;\n  }\n  if (urlObj.hostname.includes(results.cid)) {\n    return `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n  }\n  throw new Error(\n    \"unsupported URL pattern, please submit a github issue with the URL utilized\"\n  );\n}\n\n// src/core/gateway/getCid.ts\nvar getCid = async (config, cid) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let data;\n  let newUrl;\n  newUrl = await convertToDesiredGateway(cid, config?.pinataGateway);\n  if (config?.pinataGatewayKey) {\n    newUrl = `${newUrl}?pinataGatewayToken=${config?.pinataGatewayKey}`;\n  }\n  try {\n    const request = await fetch(newUrl);\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const contentType = request.headers.get(\"content-type\");\n    if (contentType?.includes(\"application/json\")) {\n      data = await request.json();\n    } else if (contentType?.includes(\"text/\")) {\n      data = await request.text();\n    } else {\n      data = await request.blob();\n    }\n    const res = {\n      data,\n      contentType\n    };\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing getCid: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while getting CID contents\"\n    );\n  }\n};\n\n// src/core/gateway/convertIPFSUrl.ts\nvar convertIPFSUrl = async (config, url) => {\n  let newUrl;\n  newUrl = await convertToDesiredGateway(url, config?.pinataGateway);\n  if (config?.pinataGatewayKey) {\n    `${newUrl}?pinataGatewayToken=${config?.pinataGatewayKey}`;\n  }\n  return newUrl;\n};\n\n// src/core/data/pinJobs.ts\nvar pinJobs = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams({\n    includesCount: \"false\"\n  });\n  if (options) {\n    const { ipfs_pin_hash: cid, status, sort, limit, offset } = options;\n    if (cid)\n      params.append(\"ipfs_pin_hash\", cid.toString());\n    if (status)\n      params.append(\"status\", status.toString());\n    if (sort)\n      params.append(\"sort\", sort.toString());\n    if (limit)\n      params.append(\"limit\", limit.toString());\n    if (offset)\n      params.append(\"offset\", offset.toString());\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/pinning/pinJobs?${params.toString()}`;\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/pinJobs\"\n    };\n  }\n  try {\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.rows;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing pinJobs: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing pin jobs\");\n  }\n};\n\n// src/core/data/pinnedFileUsage.ts\nvar pinnedFileCount = async (config) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/pinnedFileUsage\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.pin_count;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing pinnedFileUsage: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while getting pinned file usage\"\n    );\n  }\n};\n\n// src/core/data/totalStorageUsage.ts\nvar totalStorageUsage = async (config) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/totalStorageUsage\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.pin_size_total;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing totalStorageUsage: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while getting total storage usage\"\n    );\n  }\n};\n\n// src/core/keys/createKey.ts\nvar createKey = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/createKey\"\n    };\n  }\n  const data = JSON.stringify(options);\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/v3/pinata/keys`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing createKey: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while creating API key\");\n  }\n};\n\n// src/core/keys/listKeys.ts\nvar listKeys = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/listKeys\"\n    };\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const { offset, name, revoked, limitedUse, exhausted } = options;\n    if (offset)\n      params.append(\"offset\", offset.toString());\n    if (revoked !== void 0)\n      params.append(\"revoked\", revoked.toString());\n    if (limitedUse !== void 0)\n      params.append(\"limitedUse\", limitedUse.toString());\n    if (exhausted !== void 0)\n      params.append(\"exhausted\", exhausted.toString());\n    if (name)\n      params.append(\"name\", name);\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/v3/pinata/keys?${params.toString()}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.keys;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing listKeys: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing API keys\");\n  }\n};\n\n// src/core/keys/revokeKeys.ts\nvar wait2 = (milliseconds) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nvar revokeKeys = async (config, keys) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/revokeKeys\"\n    };\n  }\n  const responses = [];\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const key of keys) {\n    try {\n      const request = await fetch(`${endpoint}/v3/pinata/keys/${key}`, {\n        method: \"PUT\",\n        headers\n      });\n      await wait2(300);\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            errorData\n          );\n        }\n        throw new NetworkError(\n          `HTTP error: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      const result = await request.json();\n      responses.push({\n        key,\n        status: result\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error revoking key ${key}: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while revoking key ${key}`;\n      }\n      responses.push({\n        key,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/groups/createGroup.ts\nvar createGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify(options);\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/createGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing createGroup: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while creating a group\");\n  }\n};\n\n// src/core/groups/listGroups.ts\nvar listGroups = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/listGroups\"\n    };\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const { offset, nameContains, limit } = options;\n    if (offset)\n      params.append(\"offset\", offset.toString());\n    if (nameContains !== void 0)\n      params.append(\"nameContains\", nameContains.toString());\n    if (limit !== void 0)\n      params.append(\"limit\", limit.toString());\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups?${params.toString()}`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing listGroups: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while listing groups\");\n  }\n};\n\n// src/core/groups/getGroup.ts\nvar getGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/getGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups/${options.groupId}`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing getGroup: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while getting info for a group\"\n    );\n  }\n};\n\n// src/core/groups/addToGroup.ts\nvar addToGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    cids: options.cids\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addToGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups/${options.groupId}/cids`, {\n      method: \"PUT\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.text();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing addToGroup: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while adding CIDs to group\"\n    );\n  }\n};\n\n// src/core/groups/updateGroup.ts\nvar updateGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    name: options.name\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/updateGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups/${options.groupId}`, {\n      method: \"PUT\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing updateGroup: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while updating group\");\n  }\n};\n\n// src/core/groups/removeFromGroup.ts\nvar removeFromGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/removeFromGroup\"\n    };\n  }\n  const data = JSON.stringify({\n    cids: options.cids\n  });\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups/${options.groupId}/cids`, {\n      method: \"DELETE\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.text();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing removeFromGroup: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while removing CIDs from a group\"\n    );\n  }\n};\n\n// src/core/groups/deleteGroup.ts\nvar deleteGroup = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/deleteGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups/${options.groupId}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.text();\n    return res;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing deleteGroup: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while deleting a group\");\n  }\n};\n\n// src/core/signatures/addSignature.ts\nvar addSignature = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    signature: options.signature\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addSignature\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/v3/ipfs/signature/${options.cid}`,\n      {\n        method: \"POST\",\n        headers,\n        body: data\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 403) {\n        throw new PinataError(\n          \"Unauthorized signing, you must be the original owner of the file and it must not have a signature\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing addSignature: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while adding signature to CID\"\n    );\n  }\n};\n\n// src/core/signatures/getSignature.ts\nvar getSignature = async (config, cid) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/getSignature\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/v3/ipfs/signature/${cid}`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing getSignature: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching signature for CID\"\n    );\n  }\n};\n\n// src/core/signatures/removeSignature.ts\nvar removeSignature = async (config, cid) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/removeSignature\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/v3/ipfs/signature/${cid}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    return \"OK\";\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing addSignature: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while adding signature to CID\"\n    );\n  }\n};\n\n// src/core/gateway/analyticsTopUsage.ts\nvar analyticsTopUsage = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams({\n    includesCount: \"false\"\n  });\n  if (options) {\n    const {\n      cid,\n      gateway_domain,\n      start_date,\n      end_date,\n      file_name,\n      user_agent,\n      country,\n      region,\n      referer,\n      limit,\n      sort_order,\n      sort_by,\n      attribute\n    } = options;\n    if (cid)\n      params.append(\"cid\", cid);\n    if (gateway_domain)\n      params.append(\"gateway_domain\", gateway_domain);\n    if (start_date)\n      params.append(\"start_date\", start_date);\n    if (end_date)\n      params.append(\"end_date\", end_date);\n    if (file_name)\n      params.append(\"file_name\", file_name);\n    if (user_agent)\n      params.append(\"user_agent\", user_agent.toString());\n    if (country)\n      params.append(\"country\", country.toString());\n    if (region)\n      params.append(\"region\", region);\n    if (referer)\n      params.append(\"referer\", referer.toString());\n    if (limit)\n      params.append(\"limit\", limit.toString());\n    if (sort_order)\n      params.append(\"sort_order\", sort_order);\n    if (sort_by)\n      params.append(\"sort_by\", sort_by);\n    if (attribute)\n      params.append(\"by\", attribute);\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/v3/ipfs/gateway_analytics_top?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/analyticsTopUsage\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing anaytics usage: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching gateway usage\"\n    );\n  }\n};\n\n// src/core/gateway/analyticsDateInterval.ts\nvar analyticsDateInterval = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      cid,\n      gateway_domain,\n      start_date,\n      end_date,\n      file_name,\n      user_agent,\n      country,\n      region,\n      referer,\n      limit,\n      sort_order,\n      date_interval,\n      sort_by\n    } = options;\n    if (cid)\n      params.append(\"cid\", cid);\n    if (gateway_domain)\n      params.append(\"gateway_domain\", gateway_domain);\n    if (start_date)\n      params.append(\"start_date\", start_date);\n    if (end_date)\n      params.append(\"end_date\", end_date);\n    if (file_name)\n      params.append(\"file_name\", file_name);\n    if (user_agent)\n      params.append(\"user_agent\", user_agent.toString());\n    if (country)\n      params.append(\"country\", country.toString());\n    if (region)\n      params.append(\"region\", region);\n    if (referer)\n      params.append(\"referer\", referer.toString());\n    if (limit)\n      params.append(\"limit\", limit.toString());\n    if (sort_order)\n      params.append(\"sort_order\", sort_order);\n    if (sort_by)\n      params.append(\"sort_by\", sort_by);\n    if (date_interval)\n      params.append(\"by\", date_interval);\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/v3/ipfs/gateway_analytics_time_series?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/analyticsDateInterval\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(\n        `Error processing anaytics usage: ${error.message}`\n      );\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching gateway usage\"\n    );\n  }\n};\n\n// src/core/gateway/swapCid.ts\nvar swapCid = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    swapCid: options.swapCid\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/swapCid\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/v3/ipfs/swap/${options.cid}`, {\n      method: \"PUT\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 403) {\n        throw new PinataError(\n          \"Unauthorized CID Swap\",\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 404) {\n        throw new PinataError(\n          \"CID not pinned to account\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing CID Swap: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while swapping CID\");\n  }\n};\n\n// src/core/gateway/swapHistory.ts\nvar swapHistory = async (config, options) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/swapHistory\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/v3/ipfs/swap/${options.cid}?domain=${options.domain}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 404) {\n        throw new PinataError(\n          \"CID does not have history\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error fetching swap history: ${error.message}`);\n    }\n    throw new PinataError(\n      \"An unknown error occurred while fetching swap history\"\n    );\n  }\n};\n\n// src/core/gateway/deleteSwap.ts\nvar deleteSwap = async (config, cid) => {\n  if (!config) {\n    throw new ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/deleteSwap\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/v3/ipfs/swap/${cid}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 403) {\n        throw new PinataError(\n          \"Unauthorized CID Swap Deletion\",\n          request.status,\n          errorData\n        );\n      }\n      if (request.status === 404) {\n        throw new PinataError(\n          \"CID not pinned to account\",\n          request.status,\n          errorData\n        );\n      }\n      throw new NetworkError(\n        `HTTP error: ${errorData}`,\n        request.status,\n        errorData\n      );\n    }\n    return request.statusText;\n  } catch (error) {\n    if (error instanceof PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new PinataError(`Error processing deleteSwap: ${error.message}`);\n    }\n    throw new PinataError(\"An unknown error occurred while deleting swap\");\n  }\n};\n\n// src/core/pinataSDK.ts\nvar formatConfig = (config) => {\n  let gateway = config?.pinataGateway;\n  if (config && gateway) {\n    if (gateway && !gateway.startsWith(\"https://\")) {\n      gateway = `https://${gateway}`;\n    }\n    config.pinataGateway = gateway;\n  }\n  return config;\n};\nvar PinataSDK = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n    this.upload = new Upload(this.config);\n    this.gateways = new Gateways(this.config);\n    this.usage = new Usage(this.config);\n    this.keys = new Keys(this.config);\n    this.groups = new Groups(this.config);\n    this.signatures = new Signatures(this.config);\n  }\n  setNewHeaders(headers) {\n    if (!this.config) {\n      this.config = { pinataJwt: \"\", customHeaders: {} };\n    }\n    this.config.customHeaders = { ...this.config.customHeaders, ...headers };\n    this.upload.updateConfig(this.config);\n    this.gateways.updateConfig(this.config);\n    this.usage.updateConfig(this.config);\n    this.keys.updateConfig(this.config);\n    this.groups.updateConfig(this.config);\n    this.signatures.updateConfig(this.config);\n  }\n  testAuthentication() {\n    return testAuthentication(this.config);\n  }\n  unpin(files) {\n    return unpinFile(this.config, files);\n  }\n  listFiles() {\n    return new FilterFiles(this.config);\n  }\n  updateMetadata(options) {\n    return updateMetadata(this.config, options);\n  }\n  pinJobs() {\n    return new FilterPinJobs(this.config);\n  }\n};\nvar UploadBuilder = class {\n  constructor(config, uploadFunction, ...args) {\n    this.config = config;\n    this.uploadFunction = uploadFunction;\n    this.args = args;\n    this.version = 1;\n  }\n  addMetadata(metadata) {\n    this.metadata = metadata;\n    return this;\n  }\n  key(jwt) {\n    this.keys = jwt;\n    return this;\n  }\n  cidVersion(v) {\n    this.version = v;\n    return this;\n  }\n  group(groupId) {\n    this.groupId = groupId;\n    return this;\n  }\n  peerAddress(peerAddresses) {\n    this.peerAddresses = peerAddresses;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    const options = this.args[this.args.length - 1] || {};\n    if (this.metadata) {\n      options.metadata = this.metadata;\n    }\n    if (this.keys) {\n      options.keys = this.keys;\n    }\n    if (this.groupId) {\n      options.groupId = this.groupId;\n    }\n    if (this.version) {\n      options.cidVersion = this.version;\n    }\n    if (this.peerAddresses && \"peerAddresses\" in options) {\n      options.peerAddresses = this.peerAddresses;\n    }\n    this.args[this.args.length - 1] = options;\n    return this.uploadFunction(this.config, ...this.args).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n};\nvar Upload = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  file(file, options) {\n    return new UploadBuilder(this.config, uploadFile, file, options);\n  }\n  fileArray(files, options) {\n    return new UploadBuilder(this.config, uploadFileArray, files, options);\n  }\n  base64(base64String, options) {\n    return new UploadBuilder(this.config, uploadBase64, base64String, options);\n  }\n  url(url, options) {\n    return new UploadBuilder(this.config, uploadUrl, url, options);\n  }\n  json(data, options) {\n    return new UploadBuilder(this.config, uploadJson, data, options);\n  }\n  cid(cid, options) {\n    return new UploadBuilder(this.config, uploadCid, cid, options);\n  }\n};\nvar FilterFiles = class {\n  constructor(config) {\n    this.query = {};\n    // rate limit vars\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  pinStart(date) {\n    this.query.pinStart = date;\n    return this;\n  }\n  pinEnd(date) {\n    this.query.pinEnd = date;\n    return this;\n  }\n  pinSizeMin(size) {\n    this.query.pinSizeMin = size;\n    return this;\n  }\n  pinSizeMax(size) {\n    this.query.pinSizeMax = size;\n    return this;\n  }\n  pageLimit(limit) {\n    this.query.pageLimit = limit;\n    return this;\n  }\n  pageOffset(offset) {\n    this.query.pageOffset = offset;\n    return this;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  group(groupId) {\n    this.query.groupId = groupId;\n    return this;\n  }\n  keyValue(key, value, operator) {\n    this.query.key = key;\n    this.query.value = value;\n    if (operator) {\n      this.query.operator = operator;\n    }\n    return this;\n  }\n  then(onfulfilled) {\n    return listFiles(this.config, this.query).then(onfulfilled);\n  }\n  // rate limit, hopefully temporary?\n  async rateLimit() {\n    this.requestCount++;\n    const now = Date.now();\n    if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n      const timePassedSinceLastRequest = now - this.lastRequestTime;\n      if (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n        const delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n        await new Promise((resolve) => setTimeout(resolve, delayTime));\n      }\n      this.requestCount = 0;\n    }\n    this.lastRequestTime = Date.now();\n  }\n  async *[Symbol.asyncIterator]() {\n    let hasMore = true;\n    let offset = 0;\n    const limit = this.query.pageLimit || 10;\n    while (hasMore) {\n      await this.rateLimit();\n      this.query.pageOffset = offset;\n      this.query.pageLimit = limit;\n      const items = await listFiles(this.config, this.query);\n      for (const item of items) {\n        yield item;\n      }\n      if (items.length === 0) {\n        hasMore = false;\n      } else {\n        offset += items.length;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Gateways = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  get(cid) {\n    return getCid(this.config, cid);\n  }\n  convert(url) {\n    return convertIPFSUrl(this.config, url);\n  }\n  topUsageAnalytics(options) {\n    return new TopGatewayAnalyticsBuilder(\n      this.config,\n      options.domain,\n      options.start,\n      options.end,\n      options.sortBy,\n      options.attribute\n    );\n  }\n  dateIntervalAnalytics(options) {\n    return new TimeIntervalGatewayAnalyticsBuilder(\n      this.config,\n      options.domain,\n      options.start,\n      options.end,\n      options.interval\n    );\n  }\n  swapCid(options) {\n    return swapCid(this.config, options);\n  }\n  swapHistory(options) {\n    return swapHistory(this.config, options);\n  }\n  deleteSwap(cid) {\n    return deleteSwap(this.config, cid);\n  }\n};\nvar FilterPinJobs = class {\n  constructor(config) {\n    this.query = {};\n    // rate limit vars\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n  }\n  cid(cid) {\n    this.query.ipfs_pin_hash = cid;\n    return this;\n  }\n  status(status) {\n    this.query.status = status;\n    return this;\n  }\n  pageLimit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  pageOffset(offset) {\n    this.query.offset = offset;\n    return this;\n  }\n  sort(sort) {\n    this.query.sort = sort;\n    return this;\n  }\n  then(onfulfilled) {\n    return pinJobs(this.config, this.query).then(onfulfilled);\n  }\n  // rate limit, hopefully temporary?\n  async rateLimit() {\n    this.requestCount++;\n    const now = Date.now();\n    if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n      const timePassedSinceLastRequest = now - this.lastRequestTime;\n      if (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n        const delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n        await new Promise((resolve) => setTimeout(resolve, delayTime));\n      }\n      this.requestCount = 0;\n    }\n    this.lastRequestTime = Date.now();\n  }\n  async *[Symbol.asyncIterator]() {\n    let hasMore = true;\n    let offset = 0;\n    const limit = this.query.limit || 10;\n    while (hasMore) {\n      await this.rateLimit();\n      this.query.offset = offset;\n      this.query.limit = limit;\n      const items = await pinJobs(this.config, this.query);\n      for (const item of items) {\n        yield item;\n      }\n      if (items.length === 0) {\n        hasMore = false;\n      } else {\n        offset += items.length;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Usage = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  pinnedFileCount() {\n    return pinnedFileCount(this.config);\n  }\n  totalStorageSize() {\n    return totalStorageUsage(this.config);\n  }\n};\nvar Keys = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createKey(this.config, options);\n  }\n  list() {\n    return new FilterKeys(this.config);\n  }\n  revoke(keys) {\n    return revokeKeys(this.config, keys);\n  }\n};\nvar FilterKeys = class {\n  constructor(config) {\n    this.query = {};\n    // rate limit vars\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n  }\n  offset(offset) {\n    this.query.offset = offset;\n    return this;\n  }\n  revoked(revoked) {\n    this.query.revoked = revoked;\n    return this;\n  }\n  limitedUse(limitedUse) {\n    this.query.limitedUse = limitedUse;\n    return this;\n  }\n  exhausted(exhausted) {\n    this.query.exhausted = exhausted;\n    return this;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  then(onfulfilled) {\n    return listKeys(this.config, this.query).then(onfulfilled);\n  }\n  // rate limit, hopefully temporary?\n  async rateLimit() {\n    this.requestCount++;\n    const now = Date.now();\n    if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n      const timePassedSinceLastRequest = now - this.lastRequestTime;\n      if (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n        const delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n        await new Promise((resolve) => setTimeout(resolve, delayTime));\n      }\n      this.requestCount = 0;\n    }\n    this.lastRequestTime = Date.now();\n  }\n  async *[Symbol.asyncIterator]() {\n    let hasMore = true;\n    let offset = 0;\n    while (hasMore) {\n      await this.rateLimit();\n      this.query.offset = offset;\n      const items = await listKeys(this.config, this.query);\n      for (const item of items) {\n        yield item;\n      }\n      if (items.length === 0) {\n        hasMore = false;\n      } else {\n        offset += items.length;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Groups = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createGroup(this.config, options);\n  }\n  list() {\n    return new FilterGroups(this.config);\n  }\n  get(options) {\n    return getGroup(this.config, options);\n  }\n  addCids(options) {\n    return addToGroup(this.config, options);\n  }\n  removeCids(options) {\n    return removeFromGroup(this.config, options);\n  }\n  update(options) {\n    return updateGroup(this.config, options);\n  }\n  delete(options) {\n    return deleteGroup(this.config, options);\n  }\n};\nvar FilterGroups = class {\n  constructor(config) {\n    this.query = {};\n    // rate limit vars\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n  }\n  offset(offset) {\n    this.query.offset = offset;\n    return this;\n  }\n  name(nameContains) {\n    this.query.nameContains = nameContains;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  then(onfulfilled) {\n    return listGroups(this.config, this.query).then(onfulfilled);\n  }\n  // rate limit, hopefully temporary?\n  async rateLimit() {\n    this.requestCount++;\n    const now = Date.now();\n    if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n      const timePassedSinceLastRequest = now - this.lastRequestTime;\n      if (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n        const delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n        await new Promise((resolve) => setTimeout(resolve, delayTime));\n      }\n      this.requestCount = 0;\n    }\n    this.lastRequestTime = Date.now();\n  }\n  async *[Symbol.asyncIterator]() {\n    let hasMore = true;\n    let offset = 0;\n    while (hasMore) {\n      await this.rateLimit();\n      this.query.offset = offset;\n      const items = await listGroups(this.config, this.query);\n      for (const item of items) {\n        yield item;\n      }\n      if (items.length === 0) {\n        hasMore = false;\n      } else {\n        offset += items.length;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\nvar Signatures = class {\n  constructor(config) {\n    this.config = formatConfig(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  add(options) {\n    return addSignature(this.config, options);\n  }\n  get(cid) {\n    return getSignature(this.config, cid);\n  }\n  delete(cid) {\n    return removeSignature(this.config, cid);\n  }\n};\nvar GatewayAnalyticsBuilder = class {\n  constructor(config, query) {\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n    this.query = query;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  fileName(fileName) {\n    this.query.file_name = fileName;\n    return this;\n  }\n  userAgent(userAgent) {\n    this.query.user_agent = userAgent;\n    return this;\n  }\n  country(country) {\n    this.query.country = country;\n    return this;\n  }\n  region(region) {\n    this.query.region = region;\n    return this;\n  }\n  referer(referer) {\n    this.query.referer = referer;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  sort(order) {\n    this.query.sort_order = order;\n    return this;\n  }\n  async rateLimit() {\n    this.requestCount++;\n    const now = Date.now();\n    if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n      const timePassedSinceLastRequest = now - this.lastRequestTime;\n      if (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n        const delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n        await new Promise((resolve) => setTimeout(resolve, delayTime));\n      }\n      this.requestCount = 0;\n    }\n    this.lastRequestTime = Date.now();\n  }\n  async getAnalytics() {\n    await this.rateLimit();\n    throw new Error(\"getAnalytics method must be implemented in derived class\");\n  }\n  then(onfulfilled) {\n    return this.getAnalytics().then(onfulfilled);\n  }\n};\nvar TopGatewayAnalyticsBuilder = class extends GatewayAnalyticsBuilder {\n  constructor(config, domain, start, end, sortBy, attribute) {\n    super(config, {\n      gateway_domain: domain,\n      start_date: start,\n      end_date: end,\n      sort_by: sortBy,\n      attribute\n    });\n  }\n  async getAnalytics() {\n    return analyticsTopUsage(this.config, this.query);\n  }\n  async all() {\n    return this.getAnalytics();\n  }\n};\nvar TimeIntervalGatewayAnalyticsBuilder = class extends GatewayAnalyticsBuilder {\n  constructor(config, domain, start, end, dateInterval) {\n    super(config, {\n      gateway_domain: domain,\n      start_date: start,\n      end_date: end,\n      date_interval: dateInterval\n    });\n  }\n  sortBy(sortBy) {\n    this.query.sort_by = sortBy;\n    return this;\n  }\n  async getAnalytics() {\n    return analyticsDateInterval(this.config, this.query);\n  }\n  async all() {\n    return this.getAnalytics();\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pinata/dist/index.mjs\n");

/***/ })

};
;